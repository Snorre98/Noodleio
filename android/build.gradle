
buildscript {
  repositories {
    mavenCentral()
    google()
  }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
  namespace "gr17.noodleio.game"
  compileSdk 34

  buildFeatures {
    buildConfig true
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.setSrcDirs(['src/main/java', 'src/main/kotlin'])
      aidl.setSrcDirs(['src/main/java', 'src/main/kotlin'])
      renderscript.setSrcDirs(['src/main/java', 'src/main/kotlin'])
      res.setSrcDirs(['res'])
      assets.setSrcDirs(['../assets'])
      jniLibs.setSrcDirs(['libs'])
    }
  }
  packagingOptions {
		resources {
			excludes += ['META-INF/robovm/ios/robovm.xml', 'META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES',
                   'META-INF/dependencies.txt', '**/*.gwt.xml']
			pickFirsts += ['META-INF/LICENSE.txt', 'META-INF/LICENSE', 'META-INF/license.txt', 'META-INF/LGPL2.1',
                     'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/notice.txt']
		}
  }
  defaultConfig {
    applicationId 'gr17.noodleio.game'
    //minSdkVersion 19
    minSdkVersion 21
    targetSdkVersion 34
    versionCode 1
    versionName "1.0"
    multiDexEnabled true

    // Native Development Kit -- a set of tools that allows you to use native code languages
    // Interfaces between Java/Kotlin code and native code through JNI (Java Native Interface)
    ndk {
      abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
    }

    // Set value part with fallbacks
    Properties properties = new Properties()
    try {
      properties.load(project.rootProject.file("local.properties").newDataInputStream())
      println("Successfully loaded local.properties")
    } catch (Exception e) {
      println("Failed to load local.properties: " + e.getMessage())
      // Continue with empty properties
    }

    // Get properties with fallbacks to empty strings
    def supabaseUrl = properties.getProperty("SUPABASE_URL", "")
    def supabaseAnonKey = properties.getProperty("SUPABASE_ANON_KEY", "")

    // Log what we found (or didn't find)
    println("SUPABASE_URL: " + (supabaseUrl ? "found" : "not found"))
    println("SUPABASE_ANON_KEY: " + (supabaseAnonKey ? "found" : "not found"))

    // Set the build config fields with the values or empty strings
    buildConfigField("String", "SUPABASE_URL", "\"${supabaseUrl}\"")
    buildConfigField("String", "SUPABASE_ANON_KEY", "\"${supabaseAnonKey}\"")
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
    coreLibraryDesugaringEnabled true
  }
  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  kotlin.compilerOptions.jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17)
  buildToolsVersion '34.0.0'
}

repositories {
  // needed for AAPT2, may be needed for other tools
  google()
}

configurations { natives }

dependencies {
  // If using supabase-kt 3.0.0 and above, you need to use Ktor version 3.0.0-rc-1 or later.
  // https://supabase.com/docs/reference/kotlin/installing
  // - https://ktor.io/docs/client-engines.html#limitations

  // implementation 'io.ktor:ktor-client-[engine]:KTOR_VERSION'
  implementation 'io.ktor:ktor-client-cio:3.0.0-rc-1'

  /*libgdx*/
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-android:$gdxControllersVersion"
  implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  implementation project(':core')

  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
  doFirst {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
      def outputDir = null
      if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
      if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
      if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
      if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
      if(outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
  packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty('sdk.dir')
    if (sdkDir) {
      path = sdkDir
    } else {
      path = "$System.env.ANDROID_SDK_ROOT"
    }
  } else {
    path = "$System.env.ANDROID_SDK_ROOT"
  }

  def adb = path + "/platform-tools/adb"
  commandLine "$adb", 'shell', 'am', 'start', '-n', 'gr17.noodleio.game/gr17.noodleio.game.android.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
